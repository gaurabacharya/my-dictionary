library(shiny)
library(shinythemes)
install.packages("shiny")
library(shiny)
library(shinythemes)
install.packages("shinythemes")
library(shinythemes)
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this#
      "My first app",#
      tabPanel("Navbar 1",#
               sidebarPanel(#
                 tags$h3("Input:"),#
                 textInput("txt1", "Given Name:", ""),#
                 textInput("txt2", "Surname:", ""),#
               ), # sidebarPanel#
               mainPanel(#
                            h1("Header 1"),#
                            h4("Output 1"),#
                            verbatimTextOutput("txtout"),#
#
               ) # mainPanel#
      ), # Navbar 1, tabPanel#
      tabPanel("Navbar 2", "This panel is intentionally left blank"),#
      tabPanel("Navbar 3", "This panel is intentionally left blank")#
    ) # navbarPage#
  ) # fluidPage#
  # Define server function  #
  server <- function(input, output) {#
    output$txtout <- renderText({#
      paste( input$txt1, input$txt2, sep = " " )#
    })#
  } # server#
  # Create Shiny object#
  shinyApp(ui = ui, server = server)
library(shiny)#
library(shinythemes)#
  # Define UI#
  ui <- fluidPage(theme = shinytheme("cerulean"),#
    navbarPage(#
      # theme = "cerulean",  # <--- To use a theme, uncomment this#
      "My first app",#
      tabPanel("Navbar 1",#
               sidebarPanel(#
                 tags$h3("Input:"),#
                 textInput("txt1", "Given Name:", ""),#
                 textInput("txt2", "Surname:", ""),#
               ), # sidebarPanel#
               mainPanel(#
                            h1("Header 1"),#
                            h4("Output 1"),#
                            verbatimTextOutput("txtout"),#
#
               ) # mainPanel#
      ), # Navbar 1, tabPanel#
      tabPanel("Navbar 2", "This panel is intentionally left blank"),#
      tabPanel("Navbar 3", "This panel is intentionally left blank")#
    ) # navbarPage#
  ) # fluidPage#
  # Define server function  #
  server <- function(input, output) {#
    output$txtout <- renderText({#
      paste( input$txt1, input$txt2, sep = " " )#
    })#
  } # server#
  # Create Shiny object#
  shinyApp(ui = ui, server = server)
library(shiny)#
library(shinythemes)#
  # Define UI#
  ui <- fluidPage(theme = shinytheme("sandstone"),#
    navbarPage(#
      # theme = "cerulean",  # <--- To use a theme, uncomment this#
      "My first app",#
      tabPanel("Navbar 1",#
               sidebarPanel(#
                 tags$h3("Input:"),#
                 textInput("txt1", "Given Name:", ""),#
                 textInput("txt2", "Surname:", ""),#
               ), # sidebarPanel#
               mainPanel(#
                            h1("Header 1"),#
                            h4("Output 1"),#
                            verbatimTextOutput("txtout"),#
#
               ) # mainPanel#
      ), # Navbar 1, tabPanel#
      tabPanel("Navbar 2", "This panel is intentionally left blank"),#
      tabPanel("Navbar 3", "This panel is intentionally left blank")#
    ) # navbarPage#
  ) # fluidPage#
  # Define server function  #
  server <- function(input, output) {#
    output$txtout <- renderText({#
      paste( input$txt1, input$txt2, sep = " " )#
    })#
  } # server#
  # Create Shiny object#
  shinyApp(ui = ui, server = server)
library(shiny)#
data(airquality)#
#
# Define UI for app that draws a histogram ----#
ui <- fluidPage(#
  # App title ----#
  titlePanel("Ozone level!"),#
  # Sidebar layout with input and output definitions ----#
  sidebarLayout(#
    # Sidebar panel for inputs ----#
    sidebarPanel(#
      # Input: Slider for the number of bins ----#
      sliderInput(inputId = "bins",#
                  label = "Number of bins:",#
                  min = 1,#
                  max = 50,#
                  value = 30)#
    ),#
    # Main panel for displaying outputs ----#
    mainPanel(#
      # Output: Histogram ----#
      plotOutput(outputId = "distPlot")#
    )#
  )#
)#
#
# Define server logic required to draw a histogram ----#
server <- function(input, output) {#
  output$distPlot <- renderPlot({#
    x    <- airquality$Ozone#
    x    <- na.omit(x)#
    bins <- seq(min(x), max(x), length.out = input$bins + 1)#
    hist(x, breaks = bins, col = "#75AADB", border = "black",#
         xlab = "Ozone level",#
         main = "Histogram of Ozone level")#
  })#
}#
#
# Create Shiny app ----#
shinyApp(ui = ui, server = server)
library(shiny)#
data(airquality)#
#
# Define UI for app that draws a histogram ----#
ui <- fluidPage(#
  # App title ----#
  titlePanel("Ozone level!"),#
  # Sidebar layout with input and output definitions ----#
  sidebarLayout(#
    # Sidebar panel for inputs ----#
    sidebarPanel(#
      # Input: Slider for the number of bins ----#
      sliderInput(inputId = "bins",#
                  label = "Number of bins:",#
                  min = 1,#
                  max = 50,#
                  value = 30#
                  step = 2#
                  )#
    ),#
    # Main panel for displaying outputs ----#
    mainPanel(#
      # Output: Histogram ----#
      plotOutput(outputId = "distPlot")#
    )#
  )#
)#
#
# Define server logic required to draw a histogram ----#
server <- function(input, output) {#
  output$distPlot <- renderPlot({#
    x    <- airquality$Ozone#
    x    <- na.omit(x)#
    bins <- seq(min(x), max(x), length.out = input$bins + 1)#
    hist(x, breaks = bins, col = "#75AADB", border = "black",#
         xlab = "Ozone level",#
         main = "Histogram of Ozone level")#
  })#
}#
#
# Create Shiny app ----#
shinyApp(ui = ui, server = server)
library(shiny)#
data(airquality)#
#
# Define UI for app that draws a histogram ----#
ui <- fluidPage(#
  # App title ----#
  titlePanel("Ozone level!"),#
  # Sidebar layout with input and output definitions ----#
  sidebarLayout(#
    # Sidebar panel for inputs ----#
    sidebarPanel(#
      # Input: Slider for the number of bins ----#
      sliderInput(inputId = "bins",#
                  label = "Number of bins:",#
                  min = 1,#
                  max = 50,#
                  value = 30#
                  step = 2)#
    ),#
    # Main panel for displaying outputs ----#
    mainPanel(#
      # Output: Histogram ----#
      plotOutput(outputId = "distPlot")#
    )#
  )#
)#
#
# Define server logic required to draw a histogram ----#
server <- function(input, output) {#
  output$distPlot <- renderPlot({#
    x    <- airquality$Ozone#
    x    <- na.omit(x)#
    bins <- seq(min(x), max(x), length.out = input$bins + 1)#
    hist(x, breaks = bins, col = "#75AADB", border = "black",#
         xlab = "Ozone level",#
         main = "Histogram of Ozone level")#
  })#
}#
#
# Create Shiny app ----#
shinyApp(ui = ui, server = server)
library(shiny)#
data(airquality)#
#
# Define UI for app that draws a histogram ----#
ui <- fluidPage(#
  # App title ----#
  titlePanel("Ozone level!"),#
  # Sidebar layout with input and output definitions ----#
  sidebarLayout(#
    # Sidebar panel for inputs ----#
    sidebarPanel(#
      # Input: Slider for the number of bins ----#
      sliderInput(inputId = "bins",#
                  label = "Number of bins:",#
                  min = 1,#
                  max = 50,#
                  value = 30)#
    ),#
    # Main panel for displaying outputs ----#
    mainPanel(#
      # Output: Histogram ----#
      plotOutput(outputId = "distPlot")#
    )#
  )#
)#
#
# Define server logic required to draw a histogram ----#
server <- function(input, output) {#
  output$distPlot <- renderPlot({#
    x    <- airquality$Ozone#
    x    <- na.omit(x)#
    bins <- seq(min(x), max(x), length.out = input$bins + 1)#
    hist(x, breaks = bins, col = "#75AADB", border = "black",#
         xlab = "Ozone level",#
         main = "Histogram of Ozone level")#
  })#
}#
#
# Create Shiny app ----#
shinyApp(ui = ui, server = server)
x    <- airquality$Ozone
x
x    <- na.omit(x)
x
library(shiny)
library(shinythemes)
library(data.table)
install.packages("data.table")
install.packages(RCurl)
install.packages("RCurl")
install.packages("randomForest")
stats1920 <- read.csv(text = getURL("https://github.com/gaurabacharya/HTN-NBA-Stat-Visualizer/blob/main/datasets/stats-19-20.csv"))
stats1718 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-17-18.csv"))
stats1718 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-17-18.csv") )
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-17-18.csv") )
stats1718
stats1718[1,29]
pts <- 29
pts
pts = 29
pts
df <- data.frame(#
			Name = c("dataset", "stat")#
			Value = as.character(c(input$dataset, input$stat))#
		)
df <- data.frame(#
			Name = c("dataset", "stat"),#
			Value = as.character(c(input$dataset, input$stat)),#
			stringsAsFactors = FALSE)
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-17-18.csv") )#
#
#18-19 stats#
stats1819 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-18-19.csv"))#
#
#19-20 stats#
stats1920 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-19-20.csv"))#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
#
	titlePanel("NBA Player Statistics"),#
	sidebarLayout(#
		sidebarPanel(#
			HTML("<h3>Input Parameters</h3>"),#
			selectInput("dataset", "Choose a dataset:", #
						choices = list("17-18 Season" = "stats1718", "18-19 Season" = "stats1819", "19-20 Season" = "stats1920")#
						selected = "17-18 Season"),#
			selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = "pts", "AST" = "ast", "STL" = "stl", "BLK" = "blk", "TRB" = "trb")#
						selected = "PTS")#
			actionButton("submitbutton", "Submit", class = "btn btn-primary")#
		),#
		mainPanel(#
			plotOutput(outputId = "playerStats")#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	datasetInput <- reactive({#
		df <- data.frame(#
			Name = c("dataset", "stat"),#
			Value = as.character(c(input$dataset, input$stat)),#
			stringsAsFactors = FALSE)#
	})
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-17-18.csv") )#
#
#18-19 stats#
stats1819 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-18-19.csv"))#
#
#19-20 stats#
stats1920 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-19-20.csv"))#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
#
	titlePanel("NBA Player Statistics"),#
	sidebarLayout(#
		sidebarPanel(#
			HTML("<h3>Input Parameters</h3>"),#
			selectInput("dataset", "Choose a dataset:", #
						choices = list("17-18 Season" = "stats1718", "18-19 Season" = "stats1819", "19-20 Season" = "stats1920"),#
						selected = "17-18 Season"),#
			selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = "pts", "AST" = "ast", "STL" = "stl", "BLK" = "blk", "TRB" = "trb"),#
						selected = "PTS")#
			actionButton("submitbutton", "Submit", class = "btn btn-primary")#
		),#
		mainPanel(#
			plotOutput(outputId = "playerStats")#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	datasetInput <- reactive({#
		df <- data.frame(#
			Name = c("dataset", "stat"),#
			Value = as.character(c(input$dataset, input$stat)),#
			stringsAsFactors = FALSE)#
	})#
}
ls()
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-17-18.csv") )#
#
#18-19 stats#
stats1819 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-18-19.csv"))#
#
#19-20 stats#
stats1920 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-19-20.csv"))#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
#
	titlePanel("NBA Player Statistics"),#
	sidebarLayout(#
		sidebarPanel(#
			HTML("<h3>Input Parameters</h3>"),#
			selectInput("dataset", "Choose a dataset:", #
						choices = list("17-18 Season" = "stats1718", "18-19 Season" = "stats1819", "19-20 Season" = "stats1920"),#
						selected = "17-18 Season"),#
			selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = "pts", "AST" = "ast", "STL" = "stl", "BLK" = "blk", "TRB" = "trb"),#
						selected = "PTS"),#
			actionButton("submitbutton", "Submit", class = "btn btn-primary")#
		),#
		mainPanel(#
			plotOutput(outputId = "playerStats")#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	datasetInput <- reactive({#
		df <- data.frame(#
			Name = c("dataset", "stat"),#
			Value = as.character(c(input$dataset, input$stat)),#
			stringsAsFactors = FALSE)#
	})#
}
df
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-17-18.csv") )#
#
#18-19 stats#
stats1819 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-18-19.csv"))#
#
#19-20 stats#
stats1920 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-19-20.csv"))#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
#
	titlePanel("NBA Player Statistics"),#
	sidebarLayout(#
		sidebarPanel(#
			HTML("<h3>Input Parameters</h3>"),#
			selectInput("dataset", "Choose a dataset:", #
						choices = list("17-18 Season" = "stats1718", "18-19 Season" = "stats1819", "19-20 Season" = "stats1920"),#
						selected = "17-18 Season"),#
			selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = "pts", "AST" = "ast", "STL" = "stl", "BLK" = "blk", "TRB" = "trb"),#
						selected = "PTS"),#
			actionButton("submitbutton", "Submit", class = "btn btn-primary")#
		),#
		mainPanel(#
			plotOutput(outputId = "playerStats")#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	datasetInput <- reactive({#
		df <- data.frame(#
			Name = c("dataset", "stat"),#
			Value = as.character(c(input$dataset, input$stat)),#
			stringsAsFactors = FALSE)#
		print(df)#
	})#
}
df
df <- data.frame(#
			Name = c("dataset", "stat"),#
			Value = as.character(c(input$dataset, input$stat)),#
			stringsAsFactors = FALSE)
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-17-18.csv") )#
#
#18-19 stats#
stats1819 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-18-19.csv"))#
#
#19-20 stats#
stats1920 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-19-20.csv"))#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
#
	titlePanel("NBA Player Statistics"),#
	sidebarLayout(#
		sidebarPanel(#
			HTML("<h3>Input Parameters</h3>"),#
			selectInput("dataset", "Choose a dataset:", #
						choices = list("17-18 Season" = "stats1718", "18-19 Season" = "stats1819", "19-20 Season" = "stats1920"),#
						selected = "17-18 Season"),#
			selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = "pts", "AST" = "ast", "STL" = "stl", "BLK" = "blk", "TRB" = "trb"),#
						selected = "PTS"),#
			actionButton("submitbutton", "Submit", class = "btn btn-primary")#
		),#
		mainPanel(#
			plotOutput(outputId = "playerStats")#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	datasetInput <- reactive({#
		df <- data.frame(#
			Name = c("dataset", "stat"),#
			Value = as.character(c(input$dataset, input$stat)),#
			stringsAsFactors = FALSE)#
		write.table(df, "input.csv", sep=",", quote = FALSE, row.names = FLASE, col.names = FALSE)#
		test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)#
	})#
}
test
df
data <- input$dataset
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-17-18.csv") )#
#
#18-19 stats#
stats1819 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-18-19.csv"))#
#
#19-20 stats#
stats1920 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-19-20.csv"))#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
#
	titlePanel("NBA Player Statistics"),#
	sidebarLayout(#
		sidebarPanel(#
			HTML("<h3>Input Parameters</h3>"),#
			selectInput("dataset", "Choose a dataset:", #
						choices = list("17-18 Season" = "stats1718", "18-19 Season" = "stats1819", "19-20 Season" = "stats1920"),#
						selected = "17-18 Season"),#
			selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = "pts", "AST" = "ast", "STL" = "stl", "BLK" = "blk", "TRB" = "trb"),#
						selected = "PTS"),#
			actionButton("submitbutton", "Submit", class = "btn btn-primary")#
		),#
		mainPanel(#
			plotOutput(outputId = "playerStats")#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	datasetInput <- reactive({#
		data <- input$dataset#
		df <- data.frame(#
			Name = c("dataset", "stat"),#
			Value = as.character(c(input$dataset, input$stat)),#
			stringsAsFactors = FALSE)#
		write.table(df, "input.csv", sep=",", quote = FALSE, row.names = FLASE, col.names = FALSE)#
		test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)#
	})#
}
data
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-17-18.csv") )#
#
#18-19 stats#
stats1819 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-18-19.csv"))#
#
#19-20 stats#
stats1920 <- read.csv(text = getURL("https://raw.githubusercontent.com/gaurabacharya/HTN-NBA-Stat-Visualizer/main/datasets/stats-19-20.csv"))#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
#
	titlePanel("NBA Player Statistics"),#
	sidebarLayout(#
		sidebarPanel(#
			HTML("<h3>Input Parameters</h3>"),#
			selectInput("dataset", "Choose a dataset:", #
						choices = list("17-18 Season" = "stats1718", "18-19 Season" = "stats1819", "19-20 Season" = "stats1920"),#
						selected = "17-18 Season"),#
			selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = "pts", "AST" = "ast", "STL" = "stl", "BLK" = "blk", "TRB" = "trb"),#
						selected = "PTS"),#
			actionButton("submitbutton", "Submit", class = "btn btn-primary")#
		),#
		mainPanel(#
			plotOutput(outputId = "playerStats")#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	datasetInput <- reactive({#
		data <- input$dataset#
		df <- data.frame(#
			Name = c("dataset", "stat"),#
			Value = as.character(c(input$dataset, input$stat)),#
			stringsAsFactors = FALSE)#
		write.table(df, "input.csv", sep=",", quote = FALSE, row.names = FLASE, col.names = FALSE)#
		test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv("~/Desktop/R-shiny-app/stats-17-18.csv")#
#
#18-19 stats#
stats1819 <- read.csv("~/Desktop/R-shiny-app/stats-18-19.csv")#
#
#19-20 stats#
stats1920 <- read.csv("~/Desktop/R-shiny-app/stats-19-20.csv")#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
#
	titlePanel("NBA Player Statistics"),#
	sidebarLayout(#
		sidebarPanel(#
			HTML("<h3>Input Parameters</h3>"),#
			selectInput("dataset", "Choose a dataset:", #
						choices = list("17-18 Season" = "stats1718", "18-19 Season" = "stats1819", "19-20 Season" = "stats1920"),#
						selected = "17-18 Season"),#
			selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = "pts", "AST" = "ast", "STL" = "stl", "BLK" = "blk", "TRB" = "trb"),#
						selected = "PTS"),#
			actionButton("submitbutton", "Submit", class = "btn btn-primary")#
		),#
		mainPanel(#
			tags$label(h3('Output')),#
			verbatimTextOutput('contents'),#
			tableOutput('tabledata')#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
#
		data <- input$dataset#
		players <- data[,1]#
		category <- data[,input$stat]#
		df <- data.frame(players, category)#
	#Output Text Box#
	output$contents <- renderPrint ({#
		if (input$submitbutton > 0) {#
			isolate("Table Ready")#
		} else {#
			return("Server ready to make Table")#
		}#
	})#
	#Results Table#
	output$tabledata <- renderTable({#
		if (input$submitbutton > 0) {#
			isolate(df)#
		}#
	})#
}#
#
shinyApp(ui = ui, server = server)
# Gaurab Acharya#
#
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv("~/Desktop/R-shiny-app/stats-17-18.csv")#
#
#18-19 stats#
stats1819 <- read.csv("~/Desktop/R-shiny-app/stats-18-19.csv")#
#
#19-20 stats#
stats1920 <- read.csv("~/Desktop/R-shiny-app/stats-19-20.csv")#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
#
	titlePanel("NBA Player Statistics"),#
	sidebarLayout(#
		sidebarPanel(#
			HTML("<h3>Input Parameters</h3>"),#
			selectInput("dataset", "Choose a dataset:", #
						choices = list("17-18 Season" = "stats1718", "18-19 Season" = "stats1819", "19-20 Season" = "stats1920"),#
						selected = "17-18 Season"),#
			selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = "pts", "AST" = "ast", "STL" = "stl", "BLK" = "blk", "TRB" = "trb"),#
						selected = "PTS"),#
			actionButton("submitbutton", "Submit", class = "btn btn-primary")#
		),#
		mainPanel(#
			tags$label(h3('Output')),#
			verbatimTextOutput('contents'),#
			tableOutput('tabledata')#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	dataInput <- reactive ({#
	data <- input$dataset#
	players <- data[,1]#
	category <- data[,input$stat]#
	df <- data.frame(players, category)#
	})#
	#Output Text Box#
	output$contents <- renderPrint ({#
		if (input$submitbutton > 0) {#
			isolate("Table Ready")#
		} else {#
			return("Server ready to make Table")#
		}#
	})#
	#Results Table#
	output$tabledata <- renderTable({#
		if (input$submitbutton > 0) {#
			isolate(dataInput())#
		}#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv("~/Desktop/R-shiny-app/stats-17-18.csv")#
#
#18-19 stats#
stats1819 <- read.csv("~/Desktop/R-shiny-app/stats-18-19.csv")#
#
#19-20 stats#
stats1920 <- read.csv("~/Desktop/R-shiny-app/stats-19-20.csv")#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23
stats1718[,1]
stats1718[,pts]
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv("~/Desktop/R-shiny-app/stats-17-18.csv")#
#
#18-19 stats#
stats1819 <- read.csv("~/Desktop/R-shiny-app/stats-18-19.csv")#
#
#19-20 stats#
stats1920 <- read.csv("~/Desktop/R-shiny-app/stats-19-20.csv")#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
#
	titlePanel("NBA Player Statistics"),#
	sidebarLayout(#
		sidebarPanel(#
			HTML("<h3>Input Parameters</h3>"),#
			selectInput("dataset", "Choose a dataset:", #
						choices = list("17-18 Season" = stats1718, "18-19 Season" = stats1819, "19-20 Season" = stats1920),#
						selected = "17-18 Season"),#
			selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = pts, "AST" = ast, "STL" = stl, "BLK" = blk, "TRB" = trb),#
						selected = "PTS"),#
			actionButton("submitbutton", "Submit", class = "btn btn-primary")#
		),#
		mainPanel(#
			tags$label(h3('Output')),#
			verbatimTextOutput('contents'),#
			tableOutput('tabledata')#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	dataInput <- reactive ({#
	data <- input$dataset#
	players <- data[,1]#
	category <- data[,input$stat]#
	df <- data.frame(players, category)#
	})#
	#Output Text Box#
	output$contents <- renderPrint ({#
		if (input$submitbutton > 0) {#
			isolate("Table Ready")#
		} else {#
			return("Server ready to make Table")#
		}#
	})#
	#Results Table#
	output$tabledata <- renderTable({#
		if (input$submitbutton > 0) {#
			isolate(dataInput())#
		}#
	})#
}
# Gaurab Acharya#
#
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv("~/Desktop/R-shiny-app/stats-17-18.csv")#
#
#18-19 stats#
stats1819 <- read.csv("~/Desktop/R-shiny-app/stats-18-19.csv")#
#
#19-20 stats#
stats1920 <- read.csv("~/Desktop/R-shiny-app/stats-19-20.csv")#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
#
	titlePanel("NBA Player Statistics"),#
	sidebarLayout(#
		sidebarPanel(#
			HTML("<h3>Input Parameters</h3>"),#
			selectInput("dataset", "Choose a dataset:", #
						choices = list("17-18 Season" = stats1718, "18-19 Season" = stats1819, "19-20 Season" = stats1920),#
						selected = "17-18 Season"),#
			selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = pts, "AST" = ast, "STL" = stl, "BLK" = blk, "TRB" = trb),#
						selected = "PTS"),#
			actionButton("submitbutton", "Submit", class = "btn btn-primary")#
		),#
		mainPanel(#
			tags$label(h3('Output')),#
			verbatimTextOutput('contents'),#
			tableOutput('tabledata')#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	dataInput <- reactive ({#
	data <- input$dataset#
	players <- data[,1]#
	category <- data[,input$stat]#
	df <- data.frame(players, category)#
	})#
	#Output Text Box#
	output$contents <- renderPrint ({#
		if (input$submitbutton > 0) {#
			isolate("Table Ready")#
		} else {#
			return("Server ready to make Table")#
		}#
	})#
	#Results Table#
	output$tabledata <- renderTable({#
		if (input$submitbutton > 0) {#
			isolate(dataInput())#
		}#
	})#
}#
#
shinyApp(ui = ui, server = server)
# Gaurab Acharya#
#
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv("~/Desktop/R-shiny-app/stats-17-18.csv")#
#
#18-19 stats#
stats1819 <- read.csv("~/Desktop/R-shiny-app/stats-18-19.csv")#
#
#19-20 stats#
stats1920 <- read.csv("~/Desktop/R-shiny-app/stats-19-20.csv")#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
#
	titlePanel("NBA Player Statistics"),#
	sidebarLayout(#
		sidebarPanel(#
			HTML("<h3>Input Parameters</h3>"),#
			selectInput("dataset", "Choose a dataset:", #
						choices = list("17-18 Season", "18-19 Season", "19-20 Season"),#
						selected = "17-18 Season"),#
			selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = pts, "AST" = ast, "STL" = stl, "BLK" = blk, "TRB" = trb),#
						selected = "PTS"),#
			actionButton("submitbutton", "Submit", class = "btn btn-primary")#
		),#
		mainPanel(#
			tags$label(h3('Output')),#
			verbatimTextOutput('contents'),#
			tableOutput('tabledata')#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	dataInput <- reactive ({#
	if (input$dataset == "17-18 Season") {#
		data <- stats1718#
	} else if (input$dataset == "18-19 Season") {#
		data <- stats1819#
	} else {#
		data <- stats1920#
	}#
	players <- data[,1]#
	category <- data[,input$stat]#
	df <- data.frame(players, category)#
	})#
	#Output Text Box#
	output$contents <- renderPrint ({#
		if (input$submitbutton > 0) {#
			isolate("Table Ready")#
		} else {#
			return("Server ready to make Table")#
		}#
	})#
	#Results Table#
	output$tabledata <- renderTable({#
		if (input$submitbutton > 0) {#
			isolate(dataInput())#
		}#
	})#
}#
#
shinyApp(ui = ui, server = server)
# Gaurab Acharya#
#
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv("~/Desktop/R-shiny-app/stats-17-18.csv")#
#
#18-19 stats#
stats1819 <- read.csv("~/Desktop/R-shiny-app/stats-18-19.csv")#
#
#19-20 stats#
stats1920 <- read.csv("~/Desktop/R-shiny-app/stats-19-20.csv")#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
#
	titlePanel("NBA Player Statistics"),#
	sidebarLayout(#
		sidebarPanel(#
			HTML("<h3>Input Parameters</h3>"),#
			selectInput("dataset", "Choose a dataset:", #
						choices = list("17-18 Season", "18-19 Season", "19-20 Season"),#
						selected = "17-18 Season"),#
			selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = pts, "AST" = ast, "STL" = stl, "BLK" = blk, "TRB" = trb),#
						selected = "PTS"),#
			actionButton("submitbutton", "Submit", class = "btn btn-primary")#
		),#
		mainPanel(#
			tags$label(h3('Output')),#
			verbatimTextOutput('contents'),#
			tableOutput('tabledata')#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	dataInput <- reactive ({#
	if (input$dataset == "17-18 Season") {#
		data <- stats1718#
	} else if (input$dataset == "18-19 Season") {#
		data <- stats1819#
	} else {#
		data <- stats1920#
	}#
	players <- data[,1]#
	category <- data[,input$stat]#
	df <- data.frame(players, category)#
	print(df)#
	})#
	#Output Text Box#
	output$contents <- renderPrint ({#
		if (input$submitbutton > 0) {#
			isolate("Table Ready")#
		} else {#
			return("Server ready to make Table")#
		}#
	})#
	#Results Table#
	output$tabledata <- renderTable({#
		if (input$submitbutton > 0) {#
			isolate(dataInput())#
		}#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv("~/Desktop/R-shiny-app/stats-17-18.csv")#
#
#18-19 stats#
stats1819 <- read.csv("~/Desktop/R-shiny-app/stats-18-19.csv")#
#
#19-20 stats#
stats1920 <- read.csv("~/Desktop/R-shiny-app/stats-19-20.csv")#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23
players <- stats1718[,1]
category <- stats[,29]
category <- stats1718[,29]
df <- data.frame(players, category)
print(df)
if (input$dataset == "17-18 Season") {
data <- stats1718
} else if (input$dataset == "18-19 Season") {
data <- stats1819
} else {
data <- stats1920
}
## Only run examples in interactive R sessions#
if (interactive()) {#
#
# basic example#
shinyApp(#
  ui = fluidPage(#
    selectInput("variable", "Variable:",#
                c("Cylinders" = "cyl",#
                  "Transmission" = "am",#
                  "Gears" = "gear")),#
    tableOutput("data")#
  ),#
  server = function(input, output) {#
    output$data <- renderTable({#
      mtcars[, c("mpg", input$variable), drop = FALSE]#
    }, rownames = TRUE)#
  }#
)#
#
# demoing group support in the `choices` arg#
shinyApp(#
  ui = fluidPage(#
    selectInput("state", "Choose a state:",#
      list(`East Coast` = list("NY", "NJ", "CT"),#
           `West Coast` = list("WA", "OR", "CA"),#
           `Midwest` = list("MN", "WI", "IA"))#
    ),#
    textOutput("result")#
  ),#
  server = function(input, output) {#
    output$result <- renderText({#
      paste("You chose", input$state)#
    })#
  }#
)#
}
# DataTables example#
  shinyApp(#
    ui = fluidPage(#
      fluidRow(#
        column(12,#
          dataTableOutput('table')#
        )#
      )#
    ),#
    server = function(input, output) {#
      output$table <- renderDataTable(iris)#
    }#
  )#
}
shinyApp(#
    ui = fluidPage(#
      fluidRow(#
        column(12,#
          dataTableOutput('table')#
        )#
      )#
    ),#
    server = function(input, output) {#
      output$table <- renderDataTable(iris)#
    }#
  )
if (interactive()) {#
  # table example#
  shinyApp(#
    ui = fluidPage(#
      fluidRow(#
        column(12,#
          tableOutput('table')#
        )#
      )#
    ),#
    server = function(input, output) {#
      output$table <- renderTable(iris)#
    }#
  )#
  # DataTables example#
  shinyApp(#
    ui = fluidPage(#
      fluidRow(#
        column(12,#
          dataTableOutput('table')#
        )#
      )#
    ),#
    server = function(input, output) {#
      output$table <- renderDataTable(iris)#
    }#
  )#
}
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)
> if (interactive()) {#
+   # table example#
+   shinyApp(#
+     ui = fluidPage(#
+       fluidRow(#
+         column(12,#
+           tableOutput('table')#
+         )#
+       )#
+     ),#
+     server = function(input, output) {#
+       output$table <- renderTable(iris)#
+     }#
+   )#
+ #
+ #
+   # DataTables example#
+   shinyApp(#
+     ui = fluidPage(#
+       fluidRow(#
+         column(12,#
+           dataTableOutput('table')#
+         )#
+       )#
+     ),#
+     server = function(input, output) {#
+       output$table <- renderDataTable(iris)#
+     }#
+   )#
+ }
## Only run this example in interactive R sessions#
if (interactive()) {#
  # table example#
  shinyApp(#
    ui = fluidPage(#
      fluidRow(#
        column(12,#
          tableOutput('table')#
        )#
      )#
    ),#
    server = function(input, output) {#
      output$table <- renderTable(iris)#
    }#
  )#
  # DataTables example#
  shinyApp(#
    ui = fluidPage(#
      fluidRow(#
        column(12,#
          dataTableOutput('table')#
        )#
      )#
    ),#
    server = function(input, output) {#
      output$table <- renderDataTable(iris)#
    }#
  )#
}
# Gaurab Acharya#
#
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv("~/Desktop/R-shiny-app/stats-17-18.csv")#
#
#18-19 stats#
stats1819 <- read.csv("~/Desktop/R-shiny-app/stats-18-19.csv")#
#
#19-20 stats#
stats1920 <- read.csv("~/Desktop/R-shiny-app/stats-19-20.csv")#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
	navbarPage(#
		"NBA Stats App",#
		tabPanel("2017-2018 Season",#
				sidebarPanel(#
					selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = pts, "AST" = ast, "STL" = stl, "BLK" = blk, "TRB" = trb),#
						selected = "PTS"),#
				),#
				mainPanel(#
					verbatimTextOutput('contents')#
					tableOutput('tabledata')#
				)#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	dataInput <- reactive ({#
	players1718 <- stats1718[,1]#
	category1718 <- stats1718[,input$stat]#
	df <- data.frame(players1718, category1718)#
	print(df)#
	})#
	#Output Text Box#
	output$contents <- renderPrint ({#
		if (input$submitbutton > 0) {#
			isolate("Table Ready")#
		} else {#
			return("Server ready to make Table")#
		}#
	})#
	#Results Table#
	output$tabledata <- renderDataTable(dataInput)#
}
# Gaurab Acharya#
#
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv("~/Desktop/R-shiny-app/stats-17-18.csv")#
#
#18-19 stats#
stats1819 <- read.csv("~/Desktop/R-shiny-app/stats-18-19.csv")#
#
#19-20 stats#
stats1920 <- read.csv("~/Desktop/R-shiny-app/stats-19-20.csv")#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
	navbarPage(#
		"NBA Stats App",#
		tabPanel("2017-2018 Season",#
				sidebarPanel(#
					selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = pts, "AST" = ast, "STL" = stl, "BLK" = blk, "TRB" = trb),#
						selected = "PTS"),#
				),#
				mainPanel(#
					verbatimTextOutput('contents'),#
					tableOutput('tabledata')#
				)#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	dataInput <- reactive ({#
	players1718 <- stats1718[,1]#
	category1718 <- stats1718[,input$stat]#
	df <- data.frame(players1718, category1718)#
	print(df)#
	})#
	#Output Text Box#
	output$contents <- renderPrint ({#
		if (input$submitbutton > 0) {#
			isolate("Table Ready")#
		} else {#
			return("Server ready to make Table")#
		}#
	})#
	#Results Table#
	output$tabledata <- renderDataTable(dataInput)#
}
# Gaurab Acharya#
#
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv("~/Desktop/R-shiny-app/stats-17-18.csv")#
#
#18-19 stats#
stats1819 <- read.csv("~/Desktop/R-shiny-app/stats-18-19.csv")#
#
#19-20 stats#
stats1920 <- read.csv("~/Desktop/R-shiny-app/stats-19-20.csv")#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
	navbarPage(#
		"NBA Stats App",#
		tabPanel("2017-2018 Season",#
				sidebarPanel(#
					selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = pts, "AST" = ast, "STL" = stl, "BLK" = blk, "TRB" = trb),#
						selected = "PTS"),#
				),#
				mainPanel(#
					verbatimTextOutput('contents'),#
					tableOutput('tabledata')#
				)#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	dataInput <- reactive ({#
	players1718 <- stats1718[,1]#
	category1718 <- stats1718[,input$stat]#
	df <- data.frame(players1718, category1718)#
	print(df)#
	})#
	#Output Text Box#
	output$contents <- renderPrint ({#
		if (input$submitbutton > 0) {#
			isolate("Table Ready")#
		} else {#
			return("Server ready to make Table")#
		}#
	})#
	#Results Table#
	output$tabledata <- renderDataTable(dataInput)#
}#
#
shinyApp(ui = ui, server = server)
# Gaurab Acharya#
#
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv("~/Desktop/R-shiny-app/stats-17-18.csv")#
#
#18-19 stats#
stats1819 <- read.csv("~/Desktop/R-shiny-app/stats-18-19.csv")#
#
#19-20 stats#
stats1920 <- read.csv("~/Desktop/R-shiny-app/stats-19-20.csv")#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
	navbarPage(#
		"NBA Stats App",#
		tabPanel("2017-2018 Season",#
				sidebarPanel(#
					selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = pts, "AST" = ast, "STL" = stl, "BLK" = blk, "TRB" = trb),#
						selected = "PTS"),#
					actionButton("submitbutton", "Submit", class = "btn btn-primary")#
				),#
				mainPanel(#
					verbatimTextOutput('contents'),#
					tableOutput('tabledata')#
				)#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	dataInput <- reactive ({#
	players1718 <- stats1718[,1]#
	category1718 <- stats1718[,input$stat]#
	df <- data.frame(players1718, category1718)#
	print(df)#
	})#
	#Output Text Box#
	output$contents <- renderPrint ({#
		if (input$submitbutton > 0) {#
			isolate("Table Ready")#
		} else {#
			return("Server ready to make Table")#
		}#
	})#
	#Results Table#
	output$tabledata <- renderTable({#
		if (input$submitbutton > 0) {#
			isolate(dataInput())#
		}#
	})#
}#
#
shinyApp(ui = ui, server = server)
# Gaurab Acharya#
#
library(shiny)#
library(shinythemes)#
library(data.table)#
library(RCurl)#
library(randomForest)#
#
#17-18 stats#
stats1718 <- read.csv("~/Desktop/R-shiny-app/stats-17-18.csv")#
#
#18-19 stats#
stats1819 <- read.csv("~/Desktop/R-shiny-app/stats-18-19.csv")#
#
#19-20 stats#
stats1920 <- read.csv("~/Desktop/R-shiny-app/stats-19-20.csv")#
#
# Column number in csv file #
pts <- 29#
ast <- 24#
stl <- 25#
blk <- 26#
trb <- 23#
#User Interface#
ui <- fluidPage(theme = shinytheme("sandstone"),#
	navbarPage(#
		"NBA Stats App",#
		tabPanel("2017-2018 Season",#
				sidebarPanel(#
					selectInput("stat", "Choose a Stat Category:",#
						choices = list("PTS" = pts, "AST" = ast, "STL" = stl, "BLK" = blk, "TRB" = trb),#
						selected = "PTS"),#
					actionButton("submitbutton", "Submit", class = "btn btn-primary")#
				),#
				mainPanel(#
					verbatimTextOutput('contents'),#
					tableOutput('tabledata')#
				)#
		)#
	)#
)#
#
#Server Function#
server <- function(input, output, session) {#
	#Input#
	datasetInput <- reactive ({#
	players1718 <- stats1718[,1]#
	category1718 <- stats1718[,input$stat]#
	Output <- data.frame(players1718, category1718)#
#
	print(df)#
	})#
	#Output Text Box#
	output$contents <- renderPrint ({#
		if (input$submitbutton > 0) {#
			isolate("Table Ready")#
		} else {#
			return("Server ready to make Table")#
		}#
	})#
	#Results Table#
	output$tabledata <- renderTable({#
		if (input$submitbutton > 0) {#
			isolate(datasetInput())#
		}#
	})#
}#
#
shinyApp(ui = ui, server = server)
